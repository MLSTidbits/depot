#!/usr/bin/env bash

# Remove one or more .deb packages and corresponding buildinfo and changes files
# from the repository.

function app-info {

    case "$1" in
        info       ) echo -e "$appTitle - [$1] $2" ;;
        warning    ) echo -e "$appTitle - [$1] $2" ;;
        error      ) echo -e "$appTitle - [$1] $2" ; exit 1 ;;
        *          ) echo -e "$appTitle - [unknown] $2" ;;
    esac

}

function remove-package () {

    local pkg ver arch destDir firstLetter

    pkg="$1"
    ver="$2"
    arch="$3"

    [[ -z "$pkg" || -z "$ver" || -z "$arch" ]] &&
    app-info error "Package name, version, and architecture are required."

    # Determine directory structure
    case "$pool" in
        alpha               )
            firstLetter="${pkg:0:1}"
            destDir="$poolDir/$firstLetter/$pkg"
        ;;
        library             )
            [[ "$pkg" == lib* ]] && firstLetter="l"
            [[ "$pkg" != lib* ]] && firstLetter="${pkg:0:1}"

            destDir="$poolDir/$firstLetter/$pkg"
        ;;
        flat|*              ) destDir="$poolDir/$pkg" ;;
    esac

    local debFile="$destDir/${pkg}_${ver}_${arch}.deb"
    local buildinfoFile="$destDir/${pkg}_${ver}_${arch}.buildinfo"
    local changesFile="$destDir/${pkg}_${ver}_source.changes"

    if [[ -f "$debFile" ]]; then
        app-info info "Removing $debFile"
        rm -v "$debFile"
    else
        app-info warning "Deb file not found: $debFile"
    fi

    if [[ -f "$buildinfoFile" ]]; then
        app-info info "Removing $buildinfoFile"
        rm -v "$buildinfoFile"
    else
        app-info warning "Buildinfo file not found: $buildinfoFile"
    fi

    if [[ -f "$changesFile" ]]; then
        app-info info "Removing $changesFile"
        rm -v "$changesFile"
    else
        app-info warning "Changes file not found: $changesFile"
    fi

    # Clean up empty directories
    if [[ -d "$destDir" && -z "$(ls -A "$destDir")" ]]; then
        rmdir -v "$destDir"
        parentDir="$(dirname "$destDir")"
        if [[ -d "$parentDir" && -z "$(ls -A "$parentDir")" ]]; then
            rmdir -v "$parentDir"
        fi
    fi

}

appTitle="depot"

# Change mapfile to /usr/share/doc/depot for production releases
appVersion="$(cat doc/version 2>/dev/null || echo "unknown")"

helpInfo="$(cat <<- EOF
$appTitle - $appVersion - A simple Debian package repository manager.
Usage: $appTitle remove <package>

Options:
    -v, --version       The version of the package to remove.
    -a, --arch          The architecture of the package to remove.
    -h, --help          Show this help message and exit.

Example:
    $appTitle remove <my-package> --version "1.0.0"

Note:
    You must specify the package name, version, and architecture to
    remove a package. If no version all the packages with that name
    will be removed.

Copyright:
    2025 MLS Tidbits <contact@mlstidbits.com>
    2025 Michael Schaecher <michaelschaecher@mlstidbits.com>
License:
    GPLv3+ as published by the Free Software Foundation all rights reserved.
EOF
)"

[[ $# -eq 0 ]] && { echo "$helpInfo" ; exit 0 ; }

[[ -f .depot/init ]] && source .depot/init
[[ -f .depot/config ]] && source .depot/config

codename="${CODENAME:-stable}"
components="${COMPONENTS:-( main )}"
arch="${ARCH:-$(dpkg --print-architecture)}"

# The pool structure is either 'by alphabet and package' (default),
# 'flat package only' or 'by library and package'.
pool="${POOL:-alpha}"

version=""
package="$1"
archs=( "${arch}" )

[[ "$pool" == "alpha" || "$pool" == "library" ]] && poolDir=".depot/pool/$components"
[[ "$pool" == "flat" ]] && poolDir=".depot/pool/"

shift

while [[ $# -gt 0 ]]; do case "$1" in
    -v|--version            ) version="$1"               ; shift  ;;
    -a|--arch               ) archs=( "$1" )             ; shift  ;;
    -h|--help               ) echo "$helpInfo"           ; exit 0 ;;
    -*                      ) app-info error "Unknown option: $1" ;;
    *                       ) break                               ;;
esac ; done

remove-package "$package $version $arch"

exit 0
