#!/usr/bin/env bash
#
# depot add — Add .deb packages (and optional .buildinfo / .changes files)
#

function add_package () {
    local deb="$1"
    [[ ! -f "$deb" ]] && { $verboseLib error "File not found: $deb"; return 1; }

    local pkg ver arch destDir firstLetter
    pkg=$(dpkg-deb -f "$deb" Package)
    ver=$(dpkg-deb -f "$deb" Version)
    arch=$(dpkg-deb -f "$deb" Architecture)
    firstLetter="${pkg:0:1}"

    # Determine destination
    case "$pool" in
        alpha       ) destDir="$poolDir/$firstLetter/$pkg" ;;
        library     )
            if [[ "$pkg" == lib* ]]; then
                destDir="$poolDir/l/$pkg"
            else
                destDir="$poolDir/$firstLetter/$pkg"
            fi
        ;;
        flat|*      ) destDir="$poolDir/$pkg" ;;
    esac

    mkdir -p "$destDir"
    $verboseLib info "Adding $pkg ($ver [$arch]) → $destDir"

    mv -v "$deb" "$destDir/"

    local baseName="${deb%.deb}"

    # Optionally move associated files
    if $addBuildinfo; then
        for bi in "${baseName}"*.buildinfo; do
            [[ -f "$bi" ]] && { $verboseLib info "  + moving $(basename "$bi")"; mv -v "$bi" "$destDir/"; }
        done
    fi

    if $addChanges; then
        for ch in "${baseName}"*.changes; do
            [[ -f "$ch" ]] && { $verboseLib info "  + moving $(basename "$ch")"; mv -v "$ch" "$destDir/"; }
        done
    fi
}

# Uncomment to enable debugging
# set -xou pipefail

appTitle="depot"
appVersion="$(cat doc/version 2>/dev/null || echo "unknown")"
verboseLib="/usr/lib/depot/verbose"

# Default options
addAll=false
addBuildinfo=false
addChanges=false

helpInfo="$(cat <<- EOF
$appTitle - $appVersion - Add one or more .deb packages to the repository.
Usage: $appTitle add [options] <path>

Options:
    -a, --all           Add all .deb packages from the given directory (recursively)
    -s, --single        Add a single .deb package (default)
    -b, --buildinfo     Also move matching .buildinfo file(s)
    -c, --changes       Also move matching .changes file(s)
    -h, --help          Show this help message and exit

Examples:
    $appTitle add ./incoming --all --buildinfo --changes
    $appTitle add ./mypkg_1.0-1_amd64.deb --single
EOF
)"

[[ $# -eq 0 ]] && { echo "$helpInfo"; exit 0; }

[[ ! -f .depot/init ]] && $verboseLib error "Not a depot repository (missing .depot/init)."

if [[ -f $HOME/.depot/config ]] ; then
    source .depot/config
elif [[ -f .depot/config ]] ; then
    source .depot/config
else
    $verboseLib error "No configuration found (missing .depot/config or \$HOME/.depot/config)."
fi

[[ -f .depot/init ]] && source .depot/init
[[ -f .depot/config ]] && source .depot/config

codename="${CODENAME:-stable}"
components="${COMPONENTS:-main}"
arch="${ARCH:-$(dpkg --print-architecture)}"
pool="${POOL:-alpha}"

[[ "$pool" == "alpha" || "$pool" == "library" ]] && poolDir="pool/$components"
[[ "$pool" == "flat" ]] && poolDir="pool"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--all)       addAll=true; shift ;;
        -s|--single)    addAll=false; shift ;;
        -b|--buildinfo) addBuildinfo=true; shift ;;
        -c|--changes)   addChanges=true; shift ;;
        -h|--help)      echo "$helpInfo"; exit 0 ;;
        -*)             $verboseLib error "Unknown option: $1"; exit 1 ;;
        *)              targetPath="$1"; shift ;;
    esac
done

[[ -z "$targetPath" ]] && $verboseLib error "No package or directory specified."

# ---------------------------------------------------------------------------
# Function: add a single .deb (and related files)
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
# Main Logic: single or all
# ---------------------------------------------------------------------------
if $addAll; then
    [[ ! -d "$targetPath" ]] && $verboseLib error "Directory not found: $targetPath"
    $verboseLib info "Recursively adding all packages from: $targetPath"

    find "$targetPath" -type f -name "*.deb" | while read -r deb; do
        add_package "$deb"
    done
else
    add_package "$targetPath"
fi

exit 0
