#!/usr/bin/env bash

# `update` Updates the package database and Release files of a Debian package repository.

function update-database () {

    local baseDir="${PWD}"
    local tempFile
    local gpgCmd

    tempFile="$(mktemp /tmp/depot-packages.XXXXXX)" ||
    $verboseLib error "Failed to create temporary file for Packages generation"

    local genPackageFile="apt-ftparchive packages pool"

    local packageFile="$baseDir/$suite/$components/binary-$arch/Packages"

    local releaseFile="${baseDir}/$suite/Release"

    local genRelease ; genRelease="$(cat <<- EOL
    Origin: $origin
    Label: $label
    Suite: $suite
    Codename: $codename
    Architectures: $arch
    Components: $components
    Description: $description
    Maintainer: $maintainer
EOL
    )"

    [[ "$DRY_RUN" == true ]] && $verboseLib info "Dry run mode enabled. No changes will be made."
    eval "$genPackageFile" 2> /dev/null ||

    for c in gzip bzip2 xz; do

        ! eval "$genPackageFile" | $c -k -f - > "$packageFile/$tempFile.$c" 2> /dev/null &&
        $verboseLib error "Failed to generate compressed Packages file at $packageFile/Packages.$c"

        $verboseLib info "$genPackageFile" | $c -k -f - > "$packageFile/$tempFile.$c"

        if [[ "$DRY_RUN" == true ]]; then
            rm -f "$packageFile/$tempFile.$c"
        else
            mv "$packageFile/$tempFile.$c" "$packageFile/Packages.$c" ||
            $verboseLib error "Failed to update the compressed Packages file at $packageFile/Packages.$c"
        fi

    done

    local genReleaseHash="apt-ftparchive release"

    local releaseGPG="${baseDir}/$suite/Release.gpg"
    local inRelease="${baseDir}/$suite/InRelease"

    local gpgSign="gpg --default-key $key"

    echo "$genRelease" > "$tempFile"
    eval "$genReleaseHash" >> "$tempFile" 2> /dev/null ||
    $verboseLib error "Failed to generate Release file content"

    $verboseLib info "Generated Release file content."

    if [[ "$SIGN" == true || -n "$key" ]] ; then

        # Verify that the GPG key exists
        gpg --list-keys "$key" > /dev/null 2>&1 ||
        $verboseLib error "GPG key '$key' not found. Cannot sign Release file."

        eval "$gpgSign -- --output $tempFile.gpg --detach-sign $tempFile" 2> /dev/null ||
        $verboseLib error "Failed to sign Release file and create detached signature at $tempFile.gpg"

        eval "$gpgSign --output $tempFile.inrelease --clearsign $tempFile" 2> /dev/null ||
        $verboseLib error "Failed to sign Release file and create InRelease at $tempFile.inrelease"

        $verboseLib info "Signed Release file and created detached signature at $releaseGPG"
        $verboseLib info "Signed Release file and created InRelease at $inRelease"

        if [[ "$DRY_RUN" == true ]]; then

            rm -f "$tempFile.gpg" "$tempFile.inrelease"

        else

            mv -v "$tempFile.gpg" "$releaseGPG" ||
            $verboseLib error "Failed to update the detached signature at $releaseGPG"

            mv -v "$tempFile.inrelease" "$inRelease" ||
            $verboseLib error "Failed to update the InRelease file at $inRelease"

        fi

    fi

    [[ "$DRY_RUN" == "true" ]] && { rm -f "$tempFile"; return 0; }

    mv "$tempFile" "$releaseFile" ||
    $verboseLib error "Failed to update the Release file at $releaseFile"

    return 0
}

# Uncomment for debugging
#set -xou pipefail

appName="depot"
appVersion="$(cat /usr/share/doc/depot/version 2>/dev/null || echo "unknown")"

verboseLib="/usr/lib/depot/verbose"

[[ ! -d .depot ]] &&
$verboseLib error "No repository found. Please run '$0 init' first to create a new repository."

# Load configuration
source .depot/config ||
$verboseLib error "Failed to load configuration from .depot/config"

# Settings from configuration can either global or local; the local settings override global
if [[ -f ~/.depot/settings.conf ]]; then
    source ~/.depot/settings.conf ||
    $verboseLib error "Failed to load global configuration from ~/.depot/settings.conf"
elif [[ ! -f ~/.depot/settings.conf && -f .depot/settings.conf ]] ; then
    source .depot/settings.conf ||
    $verboseLib error "Failed to load local configuration from .depot/settings.conf"
else
    $verboseLib error \
    "No settings.conf file found. Please run '$0 config' to set up the repository settings."
fi

# Default values for optional settings
origin="${ORIGIN:-"Unknown"}"
label="${LABEL:-"default"}"
suite="${SUITE:-"stable"}"
codename="${CODENAME:-$suite}"
arch="${ARCH:-$(dpkg --print-architecture)}"
components="${COMPONENTS[*]:-"main"}"
description="${DESCRIPTION:-"Debian/Ubuntu package repository"}"
key="${GPG_ID:-""}"
maintainer="${MAINTAINER_NAME <$MAINTAINER_EMAIL>:-"$USER <$USER@$(hostname)>"}"

DRY_RUN=false
SIGN=false

helpInfo="$(cat <<- EOL
$appName - $appVersion - Update the package database and Release files.
Usage: $appName update

Options:
    -d, --dry-run                   Show what would be done without making any changes.
    -s, --sign                      Sign the Release file with GPG: This is the default
                                    if GPG_KEY_ID is set.
    -D, --description DSC..         Update the description field in the Release file.
    -h, --help                      eShow this help message and exit.

Examples:
    $appName update
    $appName update --dry-run
    $appName update --sign
    $appName update --description "New description for the repository"

Note:
    The update command should be run after adding or removing packages to ensure
    the package database and Release files are current.

Copyright:
    2025 MLS Tidbits <contact@mlstidbits.com>
    2025 Michael Schaecher <michaelschaecher@mlstidbits.com>
License:
    GPLv3+ as published by the Free Software Foundation all rights reserved.
EOL
)"

# Preflight checks
[[ ! -x "$verboseLib" ]] && { echo "Error: verbose library not found at $verboseLib" >&2 ; exit 1 ;}

[[ $# -eq 0 ]] && { echo "$helpInfo"; exit 0; }

/usr/lib/depot/verify-init

while [[ $# -gt 0 ]]; do case "$1" in
    -d|--dry-run     ) DRY_RUN=true                  ; shift   ;;
    -s|--sign        ) SIGN=true                     ; shift   ;;
    -D|--description ) description="$2"              ; shift 2 ;;
    -h|--help        ) echo "$helpInfo"              ; exit 0  ;;
    -*               ) $verboseLib error "Unknown option: $1"  ;;
    *                ) break                                   ;;
esac ; done

update-database

exit 0
